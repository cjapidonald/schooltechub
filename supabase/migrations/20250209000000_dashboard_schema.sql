-- Dashboard schema and lesson planning tables
-- Generated by AI assistant

-- PROFILES -------------------------------------------------
create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  salutation text check (salutation in ('Mr','Ms','Mx') or salutation is null),
  first_name text,
  last_name text,
  display_name text,
  avatar_url text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- CLASSES --------------------------------------------------
create table if not exists public.classes (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid not null references auth.users(id) on delete cascade,
  title text not null,
  stage text,
  subject text,
  start_date date,
  end_date date,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
create index if not exists classes_owner_idx on public.classes(owner_id);

-- CURRICULA ------------------------------------------------
create table if not exists public.curricula (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid not null references auth.users(id) on delete cascade,
  class_id uuid not null references public.classes(id) on delete cascade,
  subject text not null,
  title text not null,
  academic_year text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
create index if not exists curricula_owner_idx on public.curricula(owner_id);
create index if not exists curricula_class_idx on public.curricula(class_id);

-- CURRICULUM ITEMS ----------------------------------------
create table if not exists public.curriculum_items (
  id uuid primary key default gen_random_uuid(),
  curriculum_id uuid not null references public.curricula(id) on delete cascade,
  position int not null,
  lesson_title text not null,
  stage text,
  scheduled_on date,
  status text default 'planned' check (status in ('planned','in_progress','done')),
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  unique(curriculum_id, position)
);
create index if not exists curriculum_items_curriculum_idx on public.curriculum_items(curriculum_id);

-- LESSON PLANS (gated) ------------------------------------
create table if not exists public.lesson_plans (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid not null references auth.users(id) on delete cascade,
  curriculum_item_id uuid not null unique references public.curriculum_items(id) on delete cascade,
  title text not null,
  class_id uuid not null references public.classes(id) on delete cascade,
  stage text,
  planned_date date,
  body_md text default ''::text,
  exported_pdf_url text,
  exported_docx_url text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
create index if not exists lesson_plans_owner_idx on public.lesson_plans(owner_id);

-- RESOURCES ------------------------------------------------
create table if not exists public.resources (
  id uuid primary key default gen_random_uuid(),
  owner_id uuid references auth.users(id) on delete set null,
  is_public boolean default true,
  type text not null check (type in ('link','pdf','ppt','docx','image','video')),
  title text not null,
  instructions text,
  url text,
  file_path text,
  meta jsonb default '{}'::jsonb,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
create index if not exists resources_public_idx on public.resources(is_public);
create index if not exists resources_type_idx on public.resources(type);

-- LESSON PLAN RESOURCES -----------------------------------
create table if not exists public.lesson_plan_resources (
  id uuid primary key default gen_random_uuid(),
  lesson_plan_id uuid not null references public.lesson_plans(id) on delete cascade,
  resource_id uuid not null references public.resources(id) on delete restrict,
  position int not null default 1,
  created_at timestamptz default now(),
  unique(lesson_plan_id, resource_id)
);
create index if not exists lpr_lp_idx on public.lesson_plan_resources(lesson_plan_id);
create index if not exists lpr_resource_idx on public.lesson_plan_resources(resource_id);

-- Enable Row Level Security --------------------------------
alter table if exists public.classes enable row level security;
alter table if exists public.curricula enable row level security;
alter table if exists public.curriculum_items enable row level security;
alter table if exists public.lesson_plans enable row level security;
alter table if exists public.lesson_plan_resources enable row level security;
alter table if exists public.resources enable row level security;

-- Policies --------------------------------------------------
create policy if not exists "own classes" on public.classes
  for all using (owner_id = auth.uid()) with check (owner_id = auth.uid());

create policy if not exists "own curricula" on public.curricula
  for all using (owner_id = auth.uid()) with check (owner_id = auth.uid());

create policy if not exists "own curriculum items" on public.curriculum_items
  for all using (
    exists(
      select 1 from public.curricula c
      where c.id = curriculum_items.curriculum_id
        and c.owner_id = auth.uid()
    )
  )
  with check (
    exists(
      select 1 from public.curricula c
      where c.id = curriculum_items.curriculum_id
        and c.owner_id = auth.uid()
    )
  );

create policy if not exists "own lesson plans" on public.lesson_plans
  for all using (owner_id = auth.uid()) with check (owner_id = auth.uid());

create policy if not exists "own lesson plan resources" on public.lesson_plan_resources
  for all using (
    exists(
      select 1 from public.lesson_plans lp
      where lp.id = lesson_plan_resources.lesson_plan_id
        and lp.owner_id = auth.uid()
    )
  )
  with check (
    exists(
      select 1 from public.lesson_plans lp
      where lp.id = lesson_plan_resources.lesson_plan_id
        and lp.owner_id = auth.uid()
    )
  );

create policy if not exists "public read" on public.resources
  for select using (is_public or owner_id = auth.uid());

create policy if not exists "owners write" on public.resources
  for all using (owner_id = auth.uid()) with check (owner_id = auth.uid());

-- Storage buckets ------------------------------------------
insert into storage.buckets (id, name, public)
  values ('lesson-plans-exports', 'lesson-plans-exports', false)
  on conflict (id) do nothing;

insert into storage.buckets (id, name, public)
  values ('resources', 'resources', false)
  on conflict (id) do nothing;

